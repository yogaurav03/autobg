/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "rncameraroll.h"


@implementation NativeCameraRollModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeCameraRollModuleSpecJSI_saveToCameraRoll(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "saveToCameraRoll", @selector(saveToCameraRoll:options:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraRollModuleSpecJSI_getPhotos(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getPhotos", @selector(getPhotos:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraRollModuleSpecJSI_getAlbums(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getAlbums", @selector(getAlbums:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraRollModuleSpecJSI_deletePhotos(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "deletePhotos", @selector(deletePhotos:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraRollModuleSpecJSI_getPhotoByInternalID(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getPhotoByInternalID", @selector(getPhotoByInternalID:options:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraRollModuleSpecJSI_getPhotoThumbnail(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getPhotoThumbnail", @selector(getPhotoThumbnail:options:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraRollModuleSpecJSI_addListener(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "addListener", @selector(addListener:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraRollModuleSpecJSI_removeListeners(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "removeListeners", @selector(removeListeners:), args, count);
    }

  NativeCameraRollModuleSpecJSI::NativeCameraRollModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["saveToCameraRoll"] = MethodMetadata {2, __hostFunction_NativeCameraRollModuleSpecJSI_saveToCameraRoll};
        
        
        methodMap_["getPhotos"] = MethodMetadata {1, __hostFunction_NativeCameraRollModuleSpecJSI_getPhotos};
        
        
        methodMap_["getAlbums"] = MethodMetadata {1, __hostFunction_NativeCameraRollModuleSpecJSI_getAlbums};
        
        
        methodMap_["deletePhotos"] = MethodMetadata {1, __hostFunction_NativeCameraRollModuleSpecJSI_deletePhotos};
        
        
        methodMap_["getPhotoByInternalID"] = MethodMetadata {2, __hostFunction_NativeCameraRollModuleSpecJSI_getPhotoByInternalID};
        
        
        methodMap_["getPhotoThumbnail"] = MethodMetadata {2, __hostFunction_NativeCameraRollModuleSpecJSI_getPhotoThumbnail};
        
        
        methodMap_["addListener"] = MethodMetadata {1, __hostFunction_NativeCameraRollModuleSpecJSI_addListener};
        
        
        methodMap_["removeListeners"] = MethodMetadata {1, __hostFunction_NativeCameraRollModuleSpecJSI_removeListeners};
        
  }
} // namespace facebook::react

@implementation NativeCameraRollPermissionModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeCameraRollPermissionModuleSpecJSI_checkPermission(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "checkPermission", @selector(checkPermission:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraRollPermissionModuleSpecJSI_requestReadWritePermission(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "requestReadWritePermission", @selector(requestReadWritePermission:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraRollPermissionModuleSpecJSI_requestAddOnlyPermission(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "requestAddOnlyPermission", @selector(requestAddOnlyPermission:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraRollPermissionModuleSpecJSI_refreshPhotoSelection(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "refreshPhotoSelection", @selector(refreshPhotoSelection:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraRollPermissionModuleSpecJSI_addListener(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "addListener", @selector(addListener:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeCameraRollPermissionModuleSpecJSI_removeListeners(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "removeListeners", @selector(removeListeners:), args, count);
    }

  NativeCameraRollPermissionModuleSpecJSI::NativeCameraRollPermissionModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["checkPermission"] = MethodMetadata {1, __hostFunction_NativeCameraRollPermissionModuleSpecJSI_checkPermission};
        
        
        methodMap_["requestReadWritePermission"] = MethodMetadata {0, __hostFunction_NativeCameraRollPermissionModuleSpecJSI_requestReadWritePermission};
        
        
        methodMap_["requestAddOnlyPermission"] = MethodMetadata {0, __hostFunction_NativeCameraRollPermissionModuleSpecJSI_requestAddOnlyPermission};
        
        
        methodMap_["refreshPhotoSelection"] = MethodMetadata {0, __hostFunction_NativeCameraRollPermissionModuleSpecJSI_refreshPhotoSelection};
        
        
        methodMap_["addListener"] = MethodMetadata {1, __hostFunction_NativeCameraRollPermissionModuleSpecJSI_addListener};
        
        
        methodMap_["removeListeners"] = MethodMetadata {1, __hostFunction_NativeCameraRollPermissionModuleSpecJSI_removeListeners};
        
  }
} // namespace facebook::react
